
struct wlr_backend {
  const struct wlr_backend_impl *impl;

  struct
    struct wl_signal destroy;
    struct wl_signal new_input;
    struct wl_signal new_output;
  } events;
}

struct wlr_output_state {
    uint32_t committed; // enum wlr_output_state_field
    // Set to true to allow output reconfiguration to occur which may result
    // in temporary output disruptions and content misrepresentations.
    bool allow_reconfiguration;
    pixman_region32_t damage; // output-buffer-local coordinates
    bool enabled;
    float scale;
    enum wl_output_transform transform;
    bool adaptive_sync_enabled;
    uint32_t render_format;
    enum wl_output_subpixel subpixel;

    struct wlr_buffer *buffer;

    /* Request a tearing page-flip. When enabled, this may cause the output to
    * display a part of the previous buffer and a part of the current buffer at
    * the same time. The backend may reject the commit if a tearing page-flip
    * cannot be performed, in which case the caller should fall back to a
    * regular page-flip at the next wlr_output.frame event. */
    bool tearing_page_flip;

    enum wlr_output_state_mode_type mode_type;
    struct wlr_output_mode *mode;

    struct {
        int32_t width, height;
        int32_t refresh; // mHz, may be zero
    } custom_mode;

    uint16_t *gamma_lut;
    size_t gamma_lut_size;

    struct wlr_output_layer_state *layers;
    size_t layers_len;
};




struct wlr_output {
    const struct wlr_output_impl *impl;
    struct wlr_backend *backend;
    struct wl_event_loop *event_loop;

    struct wl_global *global;
    struct wl_list resources;

    char *name;
    char *description; // may be NULL
    char *make, *model, *serial; // may be NULL
    int32_t phys_width, phys_height; // mm

    // Note: some backends may have zero modes
    struct wl_list modes; // wlr_output_mode.link
    struct wlr_output_mode *current_mode;
    int32_t width, height;
    int32_t refresh; // mHz, may be zero

    bool enabled;
    float scale;
    enum wl_output_subpixel subpixel;
    enum wl_output_transform transform;
    enum wlr_output_adaptive_sync_status adaptive_sync_status;
    uint32_t render_format;

    // Indicates whether making changes to adaptive sync status is supported.
    // If false, changes to adaptive sync status is guaranteed to fail. If
    // true, changes may either succeed or fail.
    bool adaptive_sync_supported;

    bool needs_frame;
    // damage for cursors and fullscreen surface, in output-local coordinates
    bool frame_pending;

    // true for example with VR headsets
    bool non_desktop;

    // Commit sequence number. Incremented on each commit, may overflow.
    uint32_t commit_seq;

    struct {
        // Request to render a frame
        struct wl_signal frame;
        // Emitted when software cursors or backend-specific logic damage the
        // output
        struct wl_signal damage; // struct wlr_output_event_damage
        // Emitted when a new frame needs to be committed (because of
        // backend-specific logic)
        struct wl_signal needs_frame;
        // Emitted right before commit
        struct wl_signal precommit; // struct wlr_output_event_precommit
        // Emitted right after commit
        struct wl_signal commit; // struct wlr_output_event_commit
        // Emitted right after a commit has been presented to the user for
        // enabled outputs
        struct wl_signal present; // struct wlr_output_event_present
        // Emitted after a client bound the wl_output global
        struct wl_signal bind; // struct wlr_output_event_bind
        struct wl_signal description;
        struct wl_signal request_state; // struct wlr_output_event_request_state
        struct wl_signal destroy;
    } events;

    struct wl_event_source *idle_frame;
    struct wl_event_source *idle_done;

    int attach_render_locks; // number of locks forcing rendering

    struct wl_list cursors; // wlr_output_cursor.link
    struct wlr_output_cursor *hardware_cursor;
    struct wlr_swapchain *cursor_swapchain;
    struct wlr_buffer *cursor_front_buffer;
    int software_cursor_locks; // number of locks forcing software cursors

    struct wl_list layers; // wlr_output_layer.link

    struct wlr_allocator *allocator;
    struct wlr_renderer *renderer;
    struct wlr_swapchain *swapchain;

    struct wl_listener display_destroy;

    struct wlr_addon_set addons;

    void *data;
};


struct wlr_input_device {
	enum wlr_input_device_type type;
	char *name; // may be NULL

	struct {
		struct wl_signal destroy;
	} events;

	void *data;
};


struct wl_signal {
  struct wl_list    listener_list;
}

struct wl_list {
  struct wl_list    *prev;
  struct wl_list    *next;
}

// Handler, callback for wayland signal. Get added with wl_signal_add
struct wl_listener
  struct wl_list    link;
  wl_notify_func_t  notify;

wl_signal_add(struct wl_signal *signal, struct wl_listener *listener) {
  wl_list_insert(signal->listener_list.prev, &listener->link);
}

wl_list_insert_list(struct wl_list *list, struct wl_list *other);




struct wlr_backend {
  const struct wlr_backend_impl *impl;

  struct {
    struct wl_signal destroy
    struct wl_signal new_input
    struct wl_signal new_output
  } events
}






Proxy Ptr classes to create

- Wayland
    - Display()
        - create()
        - getEventLoop(this)
    - Signal()
        add()

    - Listener()
        new()

- wlroots.Backend()
    - autocreate(eventLoop)
    - events.new_output -> wlr_output
- wlroots.Renderer()
    - autocreate(backend)
- wlroots.Allocator()
    - autocreate(backend, renderer)





### simple.c
------------

* time.h
    - stct timespec { }
    - func clock_gettime()

* xkbcommon.h
    - tydf xkb_keysym_t: uint32_t
    - enum xkb_context_flags { NO_FLAGS, NO_DEFAULT_INCLUDES, ... }
    - func xkb_context_new(flags: xkb_context_flags): xkb_context
    - func xkb_keymap_unref(keymap: xkb_keymap*)
    - func xkb_context_unref(context: xkb_context*)
    - func xkb_keymap_new_from_names(context: xkb_context*, names, flags)
    - func xkb_state_key_get_syms(state, key, syms_out): int

* wayland-util.h
    - struct wl_list:
        - .prev: struct wl_list*
        - .next: struct wl_list*

    - func wl_list_remove(elm: wl_list*)
    - mcro wl_container_of(ptr, sample, member)

* wayland-client-core.h
    - stct wl_display { opaque }

* wayland-server-core.h
    - stct wl_listener { link: wl_list, notify: wl_notify_func_t }
    - stct wl_event_loop { opaque }
    - func wl_display_create(): wl_display*
    - func wl_display_run(display: stct wl_display*)
    - func wl_display_destroy(display: stct wl_display*)
    - func wl_display_get_event_loop(display: stct wl_display*): stct wl_event_loop*
    - func wl_display_terminate(display: wl_display*)
    - func wl_event_loop

    - stct wl_signal { listener_list: wl_list }
    - static inline func wl_signal_add()

* wlr/render/allocator.h
    - stct wlr_allocator { impl, buffer_caps: uint32_t, events: {destroy: wl_signal }}
    - func wlr_allocator_autocreate(backend: wlr_backend*, renderer: wlr_renderer*): wlr_allocator*
* wlr/render/pass.h
    - stct wlr_render_pass { opaque }
    - func wlr_render_pass_add_rect(render_pass: wlr_render_pass*, options: wlr_render_rect_options)
    - func wlr_render_pass_submit(render_pass: wlr_render_pass): bool
* wlr/render/wlr_renderer.h
    - stct wlr_renderer { render_buffer_caps, events, features, impl }
    - func wlr_renderer_autocreate(backend: stct wlr_backend*): stct wlr_renderer*

* wlr/types/wlr_keyboard.h
    - stct wlr_keyboard { base, impl, group, keymap_string, keymap_size, ...}
    - stct wlr_keyboard_key_event { time_msec, keycode, update_state, state }
    - func wlr_keyboard_from_input_device(input_device): struct wl_keyboard*
    - func wlr_keyboard_set_keymap(kb: wlr_keyboard*, keymap: xkb_keymap*)
* wlr/types/wlr_input_device.h
    - stct wlr_input_device { type, name, events, data}
    - enum wlr_input_device_type { KEYBOARD, POINTER, TOUCH, TABLET }

* wlr/types/wlr_output.h
    - stct wlr_output { ... }
    - stct wlr_output_mode { width, height, refresh, preferred, picture_aspect_ratio, link }
    - func wlr_output_preferred_mode(output: wlr_output*): wlr_output_mode*
    - func wlr_output_commit_state(output: wlr_output*, state: wlr_output_state*)
    - func wlr_output_init_render(output: wlr_output*, allocator: wlr_allocator*, renderer: wlr_renderer*)
    - wlr_output_begin_render_pass(output: wlr_output, state: wlr_output_state, buffer_age, render_options): wlr_render_pass*

    - stct wlr_output_state { allow_reconfiguration, damage, enabled, scale, transform, adaptive_sync_enabled, ... }
    - func wlr_output_state_finish(state: wlr_output_state*)
    - func wlr_output_state_init(state: wlr_output_state*)
    - func wlr_output_state_set_mode(state: wlr_output_state*, mode: wlr_output_mode*)
    - func wlr_output_state_set_enabled(state: wlr_output_state*, enabled: bool)
    - func wlr_output_state_finish(state: wlr_output_state*)

    - stct wlr_render_pass { opaque }

* wlr/util/log.h
    - func wlr_log_init(verbosity, callback): void
    - mcro wlr_log()

* wlr/backend.h
    - stct wlr_backend { impl, events: stct { destroy, new_input, new_output } }
    - func wlr_backend_start(backend: stct wlr_backend*)
    - func wlr_backend_destroy(backend: stct wlr_backend*)
    - func wlr_backend_autocreate(loop: stct wl_event_loop)



 ### wl_list ###

 #if __STDC_VERSION__ >= 202311L
    #define WL_TYPEOF(expr) typeof(expr)
 #else
    #define WL_TYPEOF(expr) __typeof__(expr)
 #endif


 #define wl_list_for_each(pos, head, member)
   for (pos = wl_container_of((head)->next, pos, member);  \
        &pos->member != (head);          \
        pos = wl_container_of(pos->member.next, pos, member))


#define wl_container_of(ptr, sample, member)
  (WL_TYPEOF(sample))((char *)(ptr) - offsetof(WL_TYPEOF(*sample), member))

offsetof - The macro offsetof expands to an integral constant expression
            of type std::size_t, the value of which is the offset, in bytes,
            from the beginning of an object of specified type to its
            specified subobject, including padding bits if any.
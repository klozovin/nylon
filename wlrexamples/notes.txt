

### simple.c
------------

* time.h
    - stct timespec { }
    - func clock_gettime()

* xkbcommon.h
    - tydf xkb_keysym_t: uint32_t
    - enum xkb_context_flags { NO_FLAGS, NO_DEFAULT_INCLUDES, ... }
    - func xkb_context_new(flags: xkb_context_flags): xkb_context
    - func xkb_keymap_unref(keymap: xkb_keymap*)
    - func xkb_context_unref(context: xkb_context*)
    - func xkb_keymap_new_from_names(context: xkb_context*, names, flags)
    - func xkb_state_key_get_syms(state, key, syms_out): int

* wayland-util.h
    - struct wl_list:
        - .prev: struct wl_list*
        - .next: struct wl_list*

    - func wl_list_remove(elm: wl_list*)
    - mcro wl_container_of(ptr, sample, member)

* wayland-client-core.h
    - stct wl_display { opaque }

* wayland-server-core.h
    - stct wl_listener { link: wl_list, notify: wl_notify_func_t }
    - stct wl_event_loop { opaque }
    - func wl_display_create(): wl_display*
    - func wl_display_run(display: stct wl_display*)
    - func wl_display_destroy(display: stct wl_display*)
    - func wl_display_get_event_loop(display: stct wl_display*): stct wl_event_loop*
    - func wl_display_terminate(display: wl_display*)
    - func wl_event_loop
    - static inline func wl_signal_add()

* wlr/render/allocator.h
    - stct wlr_allocator { impl, buffer_caps: uint32_t, events: {destroy: wl_signal }}
    - func wlr_allocator_autocreate(backend: wlr_backend*, renderer: wlr_renderer*): wlr_allocator*
* wlr/render/pass.h
    - stct wlr_render_pass { opaque }
    - func wlr_render_pass_add_rect(render_pass: wlr_render_pass*, options: wlr_render_rect_options)
    - func wlr_render_pass_submit(render_pass: wlr_render_pass): bool
* wlr/render/wlr_renderer.h
    - stct wlr_renderer { render_buffer_caps, events, features, impl }
    - func wlr_renderer_autocreate(backend: stct wlr_backend*): stct wlr_renderer*

* wlr/types/wlr_keyboard.h
    - stct wlr_keyboard { base, impl, group, keymap_string, keymap_size, ...}
    - stct wlr_keyboard_key_event { time_msec, keycode, update_state, state }
    - func wlr_keyboard_from_input_device(input_device): struct wl_keyboard*
    - func wlr_keyboard_set_keymap(kb: wlr_keyboard*, keymap: xkb_keymap*)
* wlr/types/wlr_input_device.h
    - stct wlr_input_device { type, name, events, data}
    - enum wlr_input_device_type { KEYBOARD, POINTER, TOUCH, TABLET }

* wlr/types/wlr_output.h
    - stct wlr_output { ... }
    - stct wlr_output_mode { width, height, refresh, preferred, picture_aspect_ratio, link }
    - func wlr_output_preferred_mode(output: wlr_output*): wlr_output_mode*
    - func wlr_output_commit_state(output: wlr_output*, state: wlr_output_state*)
    - func wlr_output_init_render(output: wlr_output*, allocator: wlr_allocator*, renderer: wlr_renderer*)
    - wlr_output_begin_render_pass(output: wlr_output, state: wlr_output_state, buffer_age, render_options): wlr_render_pass*

    - stct wlr_output_state { allow_reconfiguration, damage, enabled, scale, transform, adaptive_sync_enabled, ... }
    - func wlr_output_state_finish(state: wlr_output_state*)
    - func wlr_output_state_init(state: wlr_output_state*)
    - func wlr_output_state_set_mode(state: wlr_output_state*, mode: wlr_output_mode*)
    - func wlr_output_state_set_enabled(state: wlr_output_state*, enabled: bool)
    - func wlr_output_state_finish(state: wlr_output_state*)

    - stct wlr_render_pass { opaque }

* wlr/util/log.h
    - func wlr_log_init(verbosity, callback): void
    - mcro wlr_log()

* wlr/backend.h
    - stct wlr_backend { impl, events: stct { destroy, new_input, new_output } }
    - func wlr_backend_start(backend: stct wlr_backend*)
    - func wlr_backend_destroy(backend: stct wlr_backend*)
    - func wlr_backend_autocreate(loop: stct wl_event_loop)